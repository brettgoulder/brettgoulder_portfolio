:textile
  h1. Reflection

  Awhile back, I took a course with Alastair Weakley and Julien Phalip during my Masters of Interactive Multimedia program called _Digital Media Technologies_.  This was my first foray into web application programming.  Here is where I really started to learn _Ruby on Rails_, the Javascript framework known as _JQuery_, and how to write proper CSS and HTML.

  One of the best decisions that I made when I got into Ruby on Rails was to join its local users group.  From here, I was able to network with some of the best web developers in Sydney.  From here, my interest in these modern web frameworks grew and eventually I played around with Django.  

  Sayre's law states that "In any dispute the intensity of feeling is inversely proportional to the value of the stakes at issue".  This is reflective of many communities but especially the programming community.  The fighting between who has the better framework or programming language is so intense because the stakes are so low.  In reality, it does not really matter whether a person is a Pythonista or a Rubyist, because in the end, they will just use whatever tool they feel most comfortable using.  

  h2. What I Learned at the Interaction Consortium

  I spent a lot of time learning the inner workings of Django, and being able to program Python.

  h3. Python

  Python is a wonderful object oriented language created by Guido van Rossum.  Guido set out to create an object orientated language which is easy to read, scriptable, and anyone could pick up right away.  The science and maths community saw the potential for Python and it quickly became the defacto standard for many of their analytical tools.  The graphics community also has a high regard for Python.  Industrial Light & Magic has made it their official in-house language for many of the 3D tools they use for their movies.  Countless other companies use Python in some way or another(Google, Youtube, NASA, etc.)

  h3. Django

  Jacob Kaplan Moss decided to create a community website for his hometown community of Lawrence, Kansas.  Soon, after organizing his code into certain reusable structures, the Django framework was born.  Django is one of the most powerful frameworks out there running sites such as TheOnion.com, WashingtonPost.com, as well as many others.  One of my most favorite things about the framework, which most developers will rave about, is how well written the documentation.  As developers, we are kind of used to frameworks being developed with little or no documentation which can be very frustrating.  Instead, we are forced to go into the code and try to understand how certain methods work.  Django, on the other hand, is fully documentation. 

  h3. Agile and Scrum methodology

  The Interaction Consortium has been using the agile project management technique known as "Scrum".  This involves a couple different things:

  h4. Standup

  Every morning we have a little meeting called "Standup" which is one of the most fundemental parts of Scrum.  During a standup meeting, we all stand in a circle and everyone has to state what they did yesterday, what they plan on doing today, and whether anything is blocking their progress.  The one issue 

  h4. Pair programming

  Pair programming is one of my favorite methods for Scrum.  Basically, it two programmers get together and start working on a task or feature together.  This might go against a lot of programmers intuition, thinking that they would be half as efficient on projects.  However, it has been shown time and time again that efficiency goes up when you pair program.  So why is that?

  * *Concentration* - Programmers usually have difficulty sustaining concentration and maintaining a good flow.  However, programmers have the ability to  on problems a lot better when they are in pairs.  It is pretty similar to having a gym buddy who helps motivate you 

  h2. Things I wish I spent more time learning

  I really wanted to be involved in more projects beginning to end.  I seem to have been thrown into a lot of projects sporadically with no real sense of how projects begin or end.  The one project where I was able to be involved in the process from beginning to end was for my Masters of Interactive Multimedia program.  It would have been nice to be more involved in the design phase of projects where I could think about the necessary requirements in order to fulfil the client needs, as I expect to do more web development on my own in the future.

  In addition to my sporadic workload, I wish I had taken different approaches to how I thought about object oriented programming, namely I wish I read more about Design Patterns and Algorithms earlier on in my internship because they really helped me later on.  One of the books which I read during my DipITPP was _Head First Design Patterns_, which helped me follow very basic patterns in which to design software.  It makes no sense to reinvent the wheel, and until I read this book, I had trouble starting to program problems from scratch.

  Finally, I wish I had a bit more client contact.  I really liked my meetings with Aeria(whatever happened to them, I do not know) as well as George Khut.  It would have been nice to sit in on some meetings with the Art Gallery of NSW or the National Film and Sound Archive.

  h2. Where to from here?

  I just watched a live telecast of Yehuda Katz's talk "How to be awesome" last night.  Yehuda Katz is one of the core members of the Ruby on Rails team and is probably one of the most prolific programmers who is currently contributing to the Rails core.  In his talk, he went into a little history about himself.  He never had a computer science degree and only started programming professionally from 2004.  Yet, he is responsible for major shifts within the code base in order to make Rails more powerful and easy to use.  One of his driving principles is that impossible is relative.  He made a point about George Dantzig, a very famous mathematician who famously solved to statistical proofs which were considered "impossible".  The teacher put the two proofs on the board to explain that they were impossible, however George came late to class that day and thought the two problems were homework and submitted them two days later.

  So I believe that while I have a ways to go, I could eventually become a good programmer one day.  I never really expected to get from 0-60 overnight, rather it takes hard work and dedication to what I am learning.  Everyday I am learning something new in my profession.  Recently, I have been interested in more of the history of computer science.  I want to get a firm grasp of some of the legacy languages such as Lisp which have shaped computer science today.  In addition, I have also been learning new languages and technologies such as CoffeeScript, node.js, Haskell etc.